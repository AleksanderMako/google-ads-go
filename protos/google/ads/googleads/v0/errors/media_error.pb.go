// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/kritzware/google-ads-go/protos/google/ads/googleads/v0/errors/media_error.proto

package google_ads_googleads_v0_errors

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enum describing possible media errors.
type MediaErrorEnum_MediaError int32

const (
	// Enum unspecified.
	MediaErrorEnum_UNSPECIFIED MediaErrorEnum_MediaError = 0
	// The received error code is not known in this version.
	MediaErrorEnum_UNKNOWN MediaErrorEnum_MediaError = 1
	// Cannot add a standard icon type
	MediaErrorEnum_CANNOT_ADD_STANDARD_ICON MediaErrorEnum_MediaError = 2
	// May only select Standard Icons alone
	MediaErrorEnum_CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES MediaErrorEnum_MediaError = 3
	// Image contains both a media ID and media data.
	MediaErrorEnum_CANNOT_SPECIFY_MEDIA_ID_AND_DATA MediaErrorEnum_MediaError = 4
	// A media with given type and reference id already exists
	MediaErrorEnum_DUPLICATE_MEDIA MediaErrorEnum_MediaError = 5
	// A required field was not specified or is an empty string.
	MediaErrorEnum_EMPTY_FIELD MediaErrorEnum_MediaError = 6
	// A media may only be modified once per call
	MediaErrorEnum_RESOURCE_REFERENCED_IN_MULTIPLE_OPS MediaErrorEnum_MediaError = 7
	// Field is not supported for the media sub type.
	MediaErrorEnum_FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE MediaErrorEnum_MediaError = 8
	// The media id is invalid
	MediaErrorEnum_INVALID_MEDIA_ID MediaErrorEnum_MediaError = 9
	// The media subtype is invalid
	MediaErrorEnum_INVALID_MEDIA_SUB_TYPE MediaErrorEnum_MediaError = 10
	// The media type is invalid
	MediaErrorEnum_INVALID_MEDIA_TYPE MediaErrorEnum_MediaError = 11
	// The mimetype is invalid
	MediaErrorEnum_INVALID_MIME_TYPE MediaErrorEnum_MediaError = 12
	// The media reference id is invalid
	MediaErrorEnum_INVALID_REFERENCE_ID MediaErrorEnum_MediaError = 13
	// The YouTube video id is invalid
	MediaErrorEnum_INVALID_YOU_TUBE_ID MediaErrorEnum_MediaError = 14
	// Media has failed transcoding
	MediaErrorEnum_MEDIA_FAILED_TRANSCODING MediaErrorEnum_MediaError = 15
	// Media has not been transcoded
	MediaErrorEnum_MEDIA_NOT_TRANSCODED MediaErrorEnum_MediaError = 16
	// The MediaType does not match the actual media object's type
	MediaErrorEnum_MEDIA_TYPE_DOES_NOT_MATCH_OBJECT_TYPE MediaErrorEnum_MediaError = 17
	// None of the fields have been specified.
	MediaErrorEnum_NO_FIELDS_SPECIFIED MediaErrorEnum_MediaError = 18
	// One of reference Id or media Id must be specified
	MediaErrorEnum_NULL_REFERENCE_ID_AND_MEDIA_ID MediaErrorEnum_MediaError = 19
	// The string has too many characters.
	MediaErrorEnum_TOO_LONG MediaErrorEnum_MediaError = 20
	// The specified operation is not supported. Only ADD, SET, and REMOVE are
	// supported
	MediaErrorEnum_UNSUPPORTED_OPERATION MediaErrorEnum_MediaError = 21
	// The specified type is not supported.
	MediaErrorEnum_UNSUPPORTED_TYPE MediaErrorEnum_MediaError = 22
	// YouTube is unavailable for requesting video data.
	MediaErrorEnum_YOU_TUBE_SERVICE_UNAVAILABLE MediaErrorEnum_MediaError = 23
	// The YouTube video has a non positive duration.
	MediaErrorEnum_YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION MediaErrorEnum_MediaError = 24
	// The YouTube video id is syntactically valid but the video was not found.
	MediaErrorEnum_YOU_TUBE_VIDEO_NOT_FOUND MediaErrorEnum_MediaError = 25
)

var MediaErrorEnum_MediaError_name = map[int32]string{
	0:  "UNSPECIFIED",
	1:  "UNKNOWN",
	2:  "CANNOT_ADD_STANDARD_ICON",
	3:  "CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES",
	4:  "CANNOT_SPECIFY_MEDIA_ID_AND_DATA",
	5:  "DUPLICATE_MEDIA",
	6:  "EMPTY_FIELD",
	7:  "RESOURCE_REFERENCED_IN_MULTIPLE_OPS",
	8:  "FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE",
	9:  "INVALID_MEDIA_ID",
	10: "INVALID_MEDIA_SUB_TYPE",
	11: "INVALID_MEDIA_TYPE",
	12: "INVALID_MIME_TYPE",
	13: "INVALID_REFERENCE_ID",
	14: "INVALID_YOU_TUBE_ID",
	15: "MEDIA_FAILED_TRANSCODING",
	16: "MEDIA_NOT_TRANSCODED",
	17: "MEDIA_TYPE_DOES_NOT_MATCH_OBJECT_TYPE",
	18: "NO_FIELDS_SPECIFIED",
	19: "NULL_REFERENCE_ID_AND_MEDIA_ID",
	20: "TOO_LONG",
	21: "UNSUPPORTED_OPERATION",
	22: "UNSUPPORTED_TYPE",
	23: "YOU_TUBE_SERVICE_UNAVAILABLE",
	24: "YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION",
	25: "YOU_TUBE_VIDEO_NOT_FOUND",
}

var MediaErrorEnum_MediaError_value = map[string]int32{
	"UNSPECIFIED":              0,
	"UNKNOWN":                  1,
	"CANNOT_ADD_STANDARD_ICON": 2,
	"CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES": 3,
	"CANNOT_SPECIFY_MEDIA_ID_AND_DATA":             4,
	"DUPLICATE_MEDIA":                              5,
	"EMPTY_FIELD":                                  6,
	"RESOURCE_REFERENCED_IN_MULTIPLE_OPS":          7,
	"FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE":       8,
	"INVALID_MEDIA_ID":                             9,
	"INVALID_MEDIA_SUB_TYPE":                       10,
	"INVALID_MEDIA_TYPE":                           11,
	"INVALID_MIME_TYPE":                            12,
	"INVALID_REFERENCE_ID":                         13,
	"INVALID_YOU_TUBE_ID":                          14,
	"MEDIA_FAILED_TRANSCODING":                     15,
	"MEDIA_NOT_TRANSCODED":                         16,
	"MEDIA_TYPE_DOES_NOT_MATCH_OBJECT_TYPE":        17,
	"NO_FIELDS_SPECIFIED":                          18,
	"NULL_REFERENCE_ID_AND_MEDIA_ID":               19,
	"TOO_LONG":                                     20,
	"UNSUPPORTED_OPERATION":                        21,
	"UNSUPPORTED_TYPE":                             22,
	"YOU_TUBE_SERVICE_UNAVAILABLE":                 23,
	"YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION":     24,
	"YOU_TUBE_VIDEO_NOT_FOUND":                     25,
}

func (x MediaErrorEnum_MediaError) String() string {
	return proto.EnumName(MediaErrorEnum_MediaError_name, int32(x))
}

func (MediaErrorEnum_MediaError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3854eaf795f957ca, []int{0, 0}
}

// Container for enum describing possible media errors.
type MediaErrorEnum struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaErrorEnum) Reset()         { *m = MediaErrorEnum{} }
func (m *MediaErrorEnum) String() string { return proto.CompactTextString(m) }
func (*MediaErrorEnum) ProtoMessage()    {}
func (*MediaErrorEnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_3854eaf795f957ca, []int{0}
}
func (m *MediaErrorEnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaErrorEnum.Unmarshal(m, b)
}
func (m *MediaErrorEnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaErrorEnum.Marshal(b, m, deterministic)
}
func (m *MediaErrorEnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaErrorEnum.Merge(m, src)
}
func (m *MediaErrorEnum) XXX_Size() int {
	return xxx_messageInfo_MediaErrorEnum.Size(m)
}
func (m *MediaErrorEnum) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaErrorEnum.DiscardUnknown(m)
}

var xxx_messageInfo_MediaErrorEnum proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MediaErrorEnum)(nil), "google.ads.googleads.v0.errors.MediaErrorEnum")
	proto.RegisterEnum("google.ads.googleads.v0.errors.MediaErrorEnum_MediaError", MediaErrorEnum_MediaError_name, MediaErrorEnum_MediaError_value)
}

func init() {
	proto.RegisterFile("github.com/kritzware/google-ads-go/protos/google/ads/googleads/v0/errors/media_error.proto", fileDescriptor_3854eaf795f957ca)
}

var fileDescriptor_3854eaf795f957ca = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xdb, 0x6e, 0x13, 0x31,
	0x10, 0xa5, 0x2d, 0xbd, 0x30, 0x2d, 0x8d, 0xeb, 0xde, 0x51, 0x55, 0x55, 0xe1, 0x8e, 0xaa, 0x4d,
	0x24, 0xbe, 0xc0, 0x59, 0x4f, 0x12, 0xc3, 0xc6, 0x5e, 0xed, 0xda, 0x5b, 0x45, 0x8a, 0x34, 0x2a,
	0xa4, 0xaa, 0x90, 0x28, 0x41, 0x09, 0xf4, 0x37, 0xf8, 0x05, 0xc4, 0x23, 0x9f, 0xc2, 0x67, 0xf0,
	0x1d, 0x3c, 0x20, 0x7b, 0x93, 0x0d, 0xe1, 0x01, 0xde, 0xbc, 0x73, 0xce, 0xf1, 0x39, 0x33, 0xde,
	0x81, 0xe6, 0xf5, 0x68, 0x74, 0xfd, 0xfe, 0xaa, 0x71, 0x39, 0x9c, 0x34, 0xca, 0xa3, 0x3f, 0xdd,
	0x36, 0x1b, 0x57, 0xe3, 0xf1, 0x68, 0x3c, 0x69, 0xdc, 0x5c, 0x0d, 0xdf, 0x5d, 0x52, 0xf8, 0x88,
	0x3e, 0x8e, 0x47, 0x9f, 0x46, 0xfc, 0xb4, 0xa4, 0x45, 0x97, 0xc3, 0x49, 0x54, 0x29, 0xa2, 0xdb,
	0x66, 0x54, 0x2a, 0xea, 0x5f, 0xd6, 0x60, 0xbb, 0xe7, 0x55, 0xe8, 0xbf, 0xf1, 0xc3, 0xe7, 0x9b,
	0xfa, 0xaf, 0x55, 0x80, 0x79, 0x89, 0xd7, 0x60, 0xd3, 0xe9, 0x3c, 0xc5, 0x58, 0xb5, 0x15, 0x4a,
	0x76, 0x87, 0x6f, 0xc2, 0xba, 0xd3, 0xaf, 0xb5, 0xb9, 0xd0, 0x6c, 0x89, 0x9f, 0xc0, 0x51, 0x2c,
	0xb4, 0x36, 0x96, 0x84, 0x94, 0x94, 0x5b, 0xa1, 0xa5, 0xc8, 0x24, 0xa9, 0xd8, 0x68, 0xb6, 0xcc,
	0x9b, 0x70, 0x3e, 0x45, 0x73, 0x4c, 0x30, 0xb6, 0x8b, 0x04, 0xba, 0x50, 0xb6, 0x4b, 0xc6, 0x76,
	0x31, 0x23, 0xdb, 0x4f, 0x31, 0x67, 0x2b, 0xfc, 0x11, 0x9c, 0xcd, 0x14, 0xc1, 0xb2, 0x4f, 0x3d,
	0x94, 0x4a, 0x90, 0x92, 0x24, 0xb4, 0x24, 0x29, 0xac, 0x60, 0x77, 0xf9, 0x2e, 0xd4, 0xa4, 0x4b,
	0x13, 0x15, 0x0b, 0x8b, 0x25, 0x81, 0xad, 0xfa, 0xa0, 0xd8, 0x4b, 0x6d, 0x9f, 0xda, 0x0a, 0x13,
	0xc9, 0xd6, 0xf8, 0x53, 0x78, 0x98, 0x61, 0x6e, 0x5c, 0x16, 0x23, 0x65, 0xd8, 0xc6, 0x0c, 0x75,
	0x8c, 0x92, 0x94, 0xa6, 0x9e, 0x4b, 0xac, 0x4a, 0x13, 0x24, 0x93, 0xe6, 0x6c, 0x9d, 0xbf, 0x80,
	0x27, 0x41, 0x43, 0xc1, 0xd7, 0xa5, 0xa9, 0xc9, 0x2c, 0x4a, 0x6a, 0x9b, 0x6c, 0xea, 0x9e, 0xbb,
	0x56, 0x48, 0xc8, 0x36, 0xf8, 0x1e, 0x30, 0xa5, 0x0b, 0x91, 0x28, 0x59, 0x25, 0x63, 0xf7, 0xf8,
	0x03, 0x38, 0x58, 0xac, 0x56, 0x0a, 0xe0, 0x07, 0xc0, 0x17, 0xb1, 0x50, 0xdf, 0xe4, 0xfb, 0xb0,
	0x53, 0xd5, 0x55, 0x0f, 0xcb, 0xf2, 0x16, 0x3f, 0x82, 0xbd, 0x59, 0xb9, 0x0a, 0xed, 0x4d, 0xee,
	0xf3, 0x43, 0xd8, 0x9d, 0x21, 0x7d, 0xe3, 0xc8, 0xba, 0x56, 0x00, 0xb6, 0xfd, 0x23, 0x94, 0x37,
	0xb7, 0x85, 0x4a, 0x50, 0x92, 0xcd, 0x84, 0xce, 0x63, 0x23, 0x95, 0xee, 0xb0, 0x9a, 0xbf, 0xb0,
	0x44, 0x7d, 0x77, 0x33, 0x08, 0x25, 0x63, 0xfc, 0x39, 0x3c, 0x9e, 0x27, 0x22, 0x69, 0x30, 0x0f,
	0x9c, 0x9e, 0xb0, 0x71, 0x97, 0x4c, 0xeb, 0x95, 0x7f, 0xb1, 0x90, 0x6a, 0xc7, 0x7b, 0x6b, 0x53,
	0x4e, 0x36, 0xa7, 0xf9, 0xdf, 0xc0, 0x79, 0x1d, 0x4e, 0xb5, 0x4b, 0x92, 0x85, 0xac, 0xe1, 0xa9,
	0xaa, 0xe9, 0xec, 0xf2, 0x2d, 0xd8, 0xb0, 0xc6, 0x50, 0x62, 0x74, 0x87, 0xed, 0xf1, 0x63, 0xd8,
	0x77, 0x7a, 0x3e, 0x65, 0x93, 0x62, 0x26, 0xac, 0x32, 0x9a, 0xed, 0xfb, 0xe1, 0xfe, 0x09, 0x05,
	0xef, 0x03, 0x7e, 0x06, 0x27, 0x55, 0xbf, 0x39, 0x66, 0x85, 0x8a, 0x91, 0x9c, 0x16, 0x85, 0x50,
	0x89, 0x68, 0x25, 0xc8, 0x0e, 0xf9, 0x39, 0x3c, 0xab, 0x18, 0x85, 0x92, 0x68, 0xa8, 0x2b, 0x7c,
	0x2f, 0x9a, 0x52, 0x93, 0x2b, 0xab, 0x0a, 0x24, 0xe9, 0xa6, 0x2e, 0x47, 0x7e, 0x5c, 0x7f, 0xb1,
	0x7d, 0xd7, 0x6d, 0xe3, 0xb4, 0x64, 0xc7, 0xad, 0xaf, 0x4b, 0x50, 0x7f, 0x3b, 0xba, 0x89, 0xfe,
	0xbd, 0x38, 0xad, 0xda, 0x7c, 0x45, 0x52, 0xbf, 0x69, 0xe9, 0xd2, 0xb7, 0xe5, 0x95, 0x8e, 0x10,
	0xdf, 0x97, 0x4f, 0x3b, 0xa5, 0x52, 0x0c, 0x27, 0x51, 0x79, 0xf4, 0xa7, 0xa2, 0x19, 0x05, 0xf2,
	0xe4, 0xc7, 0x8c, 0x30, 0x10, 0xc3, 0xc9, 0xa0, 0x22, 0x0c, 0x8a, 0xe6, 0xa0, 0x24, 0xfc, 0xfc,
	0x1f, 0xe1, 0xcd, 0x5a, 0xd8, 0xed, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x02, 0xad, 0x16,
	0x54, 0x0f, 0x04, 0x00, 0x00,
}
