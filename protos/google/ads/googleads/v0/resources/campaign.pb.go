// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v0/resources/campaign.proto

package google_ads_googleads_v0_resources

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	common "google/ads/googleads/v0/common"
	enums "google/ads/googleads/v0/enums"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A campaign.
type Campaign struct {
	// The resource name of the campaign.
	// Campaign resource names have the form:
	//
	// `customers/{customer_id}/campaigns/{campaign_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// The ID of the campaign.
	Id *wrappers.Int64Value `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the campaign.
	//
	// This field is required and should not be empty when creating new
	// campaigns.
	//
	// It must not contain any null (code point 0x0), NL line feed
	// (code point 0xA) or carriage return (code point 0xD) characters.
	Name *wrappers.StringValue `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The status of the campaign.
	//
	// When a new campaign is added, the status defaults to ENABLED.
	Status enums.CampaignStatusEnum_CampaignStatus `protobuf:"varint,5,opt,name=status,proto3,enum=google.ads.googleads.v0.enums.CampaignStatusEnum_CampaignStatus" json:"status,omitempty"`
	// The ad serving status of the campaign.
	ServingStatus enums.CampaignServingStatusEnum_CampaignServingStatus `protobuf:"varint,21,opt,name=serving_status,json=servingStatus,proto3,enum=google.ads.googleads.v0.enums.CampaignServingStatusEnum_CampaignServingStatus" json:"serving_status,omitempty"`
	// The ad serving optimization status of the campaign.
	AdServingOptimizationStatus enums.AdServingOptimizationStatusEnum_AdServingOptimizationStatus `protobuf:"varint,8,opt,name=ad_serving_optimization_status,json=adServingOptimizationStatus,proto3,enum=google.ads.googleads.v0.enums.AdServingOptimizationStatusEnum_AdServingOptimizationStatus" json:"ad_serving_optimization_status,omitempty"`
	// The primary serving target for ads within the campaign.
	// The targeting options can be refined in `network_settings`.
	//
	// Can be set only when creating campaigns.
	// After the campaign is created, the field can not be changed.
	AdvertisingChannelType enums.AdvertisingChannelTypeEnum_AdvertisingChannelType `protobuf:"varint,9,opt,name=advertising_channel_type,json=advertisingChannelType,proto3,enum=google.ads.googleads.v0.enums.AdvertisingChannelTypeEnum_AdvertisingChannelType" json:"advertising_channel_type,omitempty"`
	// Optional refinement to `advertising_channel_type`.
	// Must be a valid sub-type of the parent channel type.
	//
	// Can be set only when creating campaigns.
	// After campaign is created, the field can not be changed.
	AdvertisingChannelSubType enums.AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType `protobuf:"varint,10,opt,name=advertising_channel_sub_type,json=advertisingChannelSubType,proto3,enum=google.ads.googleads.v0.enums.AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType" json:"advertising_channel_sub_type,omitempty"`
	// The URL template for constructing a tracking URL.
	TrackingUrlTemplate *wrappers.StringValue `protobuf:"bytes,11,opt,name=tracking_url_template,json=trackingUrlTemplate,proto3" json:"tracking_url_template,omitempty"`
	// The list of mappings used to substitute custom parameter tags in a
	// `tracking_url_template`, `final_urls`, or `mobile_final_urls`.
	UrlCustomParameters []*common.CustomParameter `protobuf:"bytes,12,rep,name=url_custom_parameters,json=urlCustomParameters,proto3" json:"url_custom_parameters,omitempty"`
	// The network settings for the campaign.
	NetworkSettings *Campaign_NetworkSettings `protobuf:"bytes,14,opt,name=network_settings,json=networkSettings,proto3" json:"network_settings,omitempty"`
	// The hotel setting for the campaign.
	HotelSetting *Campaign_HotelSettingInfo `protobuf:"bytes,32,opt,name=hotel_setting,json=hotelSetting,proto3" json:"hotel_setting,omitempty"`
	// The setting for controlling Dynamic Search Ads (DSA).
	DynamicSearchAdsSetting *Campaign_DynamicSearchAdsSetting `protobuf:"bytes,33,opt,name=dynamic_search_ads_setting,json=dynamicSearchAdsSetting,proto3" json:"dynamic_search_ads_setting,omitempty"`
	// The budget of the campaign.
	//
	// This field must not be used in WHERE clauses.
	CampaignBudget *wrappers.StringValue `protobuf:"bytes,6,opt,name=campaign_budget,json=campaignBudget,proto3" json:"campaign_budget,omitempty"`
	// The type of bidding strategy.
	//
	// A bidding strategy can be created by setting either the bidding scheme to
	// create a standard bidding strategy or the `bidding_strategy` field to
	// create a portfolio bidding strategy.
	//
	// This field is read-only.
	BiddingStrategyType enums.BiddingStrategyTypeEnum_BiddingStrategyType `protobuf:"varint,22,opt,name=bidding_strategy_type,json=biddingStrategyType,proto3,enum=google.ads.googleads.v0.enums.BiddingStrategyTypeEnum_BiddingStrategyType" json:"bidding_strategy_type,omitempty"`
	// The date when campaign started.
	//
	// This field must not be used in WHERE clauses.
	StartDate *wrappers.StringValue `protobuf:"bytes,19,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The date when campaign ended.
	//
	// This field must not be used in WHERE clauses.
	EndDate *wrappers.StringValue `protobuf:"bytes,20,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// The bidding strategy for the campaign.
	//
	// Must be either portfolio (created via BiddingStrategy service) or
	// standard, that is embedded into the campaign.
	//
	// Types that are valid to be assigned to CampaignBiddingStrategy:
	//	*Campaign_BiddingStrategy
	//	*Campaign_ManualCpc
	//	*Campaign_ManualCpm
	//	*Campaign_MaximizeConversions
	//	*Campaign_MaximizeConversionValue
	//	*Campaign_TargetCpa
	//	*Campaign_TargetRoas
	//	*Campaign_TargetSpend
	//	*Campaign_PercentCpc
	CampaignBiddingStrategy isCampaign_CampaignBiddingStrategy `protobuf_oneof:"campaign_bidding_strategy"`
	XXX_NoUnkeyedLiteral    struct{}                           `json:"-"`
	XXX_unrecognized        []byte                             `json:"-"`
	XXX_sizecache           int32                              `json:"-"`
}

func (m *Campaign) Reset()         { *m = Campaign{} }
func (m *Campaign) String() string { return proto.CompactTextString(m) }
func (*Campaign) ProtoMessage()    {}
func (*Campaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_84fe59640f66502c, []int{0}
}
func (m *Campaign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Campaign.Unmarshal(m, b)
}
func (m *Campaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Campaign.Marshal(b, m, deterministic)
}
func (m *Campaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign.Merge(m, src)
}
func (m *Campaign) XXX_Size() int {
	return xxx_messageInfo_Campaign.Size(m)
}
func (m *Campaign) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign proto.InternalMessageInfo

func (m *Campaign) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *Campaign) GetId() *wrappers.Int64Value {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Campaign) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Campaign) GetStatus() enums.CampaignStatusEnum_CampaignStatus {
	if m != nil {
		return m.Status
	}
	return enums.CampaignStatusEnum_UNSPECIFIED
}

func (m *Campaign) GetServingStatus() enums.CampaignServingStatusEnum_CampaignServingStatus {
	if m != nil {
		return m.ServingStatus
	}
	return enums.CampaignServingStatusEnum_UNSPECIFIED
}

func (m *Campaign) GetAdServingOptimizationStatus() enums.AdServingOptimizationStatusEnum_AdServingOptimizationStatus {
	if m != nil {
		return m.AdServingOptimizationStatus
	}
	return enums.AdServingOptimizationStatusEnum_UNSPECIFIED
}

func (m *Campaign) GetAdvertisingChannelType() enums.AdvertisingChannelTypeEnum_AdvertisingChannelType {
	if m != nil {
		return m.AdvertisingChannelType
	}
	return enums.AdvertisingChannelTypeEnum_UNSPECIFIED
}

func (m *Campaign) GetAdvertisingChannelSubType() enums.AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType {
	if m != nil {
		return m.AdvertisingChannelSubType
	}
	return enums.AdvertisingChannelSubTypeEnum_UNSPECIFIED
}

func (m *Campaign) GetTrackingUrlTemplate() *wrappers.StringValue {
	if m != nil {
		return m.TrackingUrlTemplate
	}
	return nil
}

func (m *Campaign) GetUrlCustomParameters() []*common.CustomParameter {
	if m != nil {
		return m.UrlCustomParameters
	}
	return nil
}

func (m *Campaign) GetNetworkSettings() *Campaign_NetworkSettings {
	if m != nil {
		return m.NetworkSettings
	}
	return nil
}

func (m *Campaign) GetHotelSetting() *Campaign_HotelSettingInfo {
	if m != nil {
		return m.HotelSetting
	}
	return nil
}

func (m *Campaign) GetDynamicSearchAdsSetting() *Campaign_DynamicSearchAdsSetting {
	if m != nil {
		return m.DynamicSearchAdsSetting
	}
	return nil
}

func (m *Campaign) GetCampaignBudget() *wrappers.StringValue {
	if m != nil {
		return m.CampaignBudget
	}
	return nil
}

func (m *Campaign) GetBiddingStrategyType() enums.BiddingStrategyTypeEnum_BiddingStrategyType {
	if m != nil {
		return m.BiddingStrategyType
	}
	return enums.BiddingStrategyTypeEnum_UNSPECIFIED
}

func (m *Campaign) GetStartDate() *wrappers.StringValue {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Campaign) GetEndDate() *wrappers.StringValue {
	if m != nil {
		return m.EndDate
	}
	return nil
}

type isCampaign_CampaignBiddingStrategy interface {
	isCampaign_CampaignBiddingStrategy()
}

type Campaign_BiddingStrategy struct {
	BiddingStrategy *wrappers.StringValue `protobuf:"bytes,23,opt,name=bidding_strategy,json=biddingStrategy,proto3,oneof"`
}

type Campaign_ManualCpc struct {
	ManualCpc *common.ManualCpc `protobuf:"bytes,24,opt,name=manual_cpc,json=manualCpc,proto3,oneof"`
}

type Campaign_ManualCpm struct {
	ManualCpm *common.ManualCpm `protobuf:"bytes,25,opt,name=manual_cpm,json=manualCpm,proto3,oneof"`
}

type Campaign_MaximizeConversions struct {
	MaximizeConversions *common.MaximizeConversions `protobuf:"bytes,30,opt,name=maximize_conversions,json=maximizeConversions,proto3,oneof"`
}

type Campaign_MaximizeConversionValue struct {
	MaximizeConversionValue *common.MaximizeConversionValue `protobuf:"bytes,31,opt,name=maximize_conversion_value,json=maximizeConversionValue,proto3,oneof"`
}

type Campaign_TargetCpa struct {
	TargetCpa *common.TargetCpa `protobuf:"bytes,26,opt,name=target_cpa,json=targetCpa,proto3,oneof"`
}

type Campaign_TargetRoas struct {
	TargetRoas *common.TargetRoas `protobuf:"bytes,29,opt,name=target_roas,json=targetRoas,proto3,oneof"`
}

type Campaign_TargetSpend struct {
	TargetSpend *common.TargetSpend `protobuf:"bytes,27,opt,name=target_spend,json=targetSpend,proto3,oneof"`
}

type Campaign_PercentCpc struct {
	PercentCpc *common.PercentCpc `protobuf:"bytes,34,opt,name=percent_cpc,json=percentCpc,proto3,oneof"`
}

func (*Campaign_BiddingStrategy) isCampaign_CampaignBiddingStrategy() {}

func (*Campaign_ManualCpc) isCampaign_CampaignBiddingStrategy() {}

func (*Campaign_ManualCpm) isCampaign_CampaignBiddingStrategy() {}

func (*Campaign_MaximizeConversions) isCampaign_CampaignBiddingStrategy() {}

func (*Campaign_MaximizeConversionValue) isCampaign_CampaignBiddingStrategy() {}

func (*Campaign_TargetCpa) isCampaign_CampaignBiddingStrategy() {}

func (*Campaign_TargetRoas) isCampaign_CampaignBiddingStrategy() {}

func (*Campaign_TargetSpend) isCampaign_CampaignBiddingStrategy() {}

func (*Campaign_PercentCpc) isCampaign_CampaignBiddingStrategy() {}

func (m *Campaign) GetCampaignBiddingStrategy() isCampaign_CampaignBiddingStrategy {
	if m != nil {
		return m.CampaignBiddingStrategy
	}
	return nil
}

func (m *Campaign) GetBiddingStrategy() *wrappers.StringValue {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_BiddingStrategy); ok {
		return x.BiddingStrategy
	}
	return nil
}

func (m *Campaign) GetManualCpc() *common.ManualCpc {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_ManualCpc); ok {
		return x.ManualCpc
	}
	return nil
}

func (m *Campaign) GetManualCpm() *common.ManualCpm {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_ManualCpm); ok {
		return x.ManualCpm
	}
	return nil
}

func (m *Campaign) GetMaximizeConversions() *common.MaximizeConversions {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_MaximizeConversions); ok {
		return x.MaximizeConversions
	}
	return nil
}

func (m *Campaign) GetMaximizeConversionValue() *common.MaximizeConversionValue {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_MaximizeConversionValue); ok {
		return x.MaximizeConversionValue
	}
	return nil
}

func (m *Campaign) GetTargetCpa() *common.TargetCpa {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_TargetCpa); ok {
		return x.TargetCpa
	}
	return nil
}

func (m *Campaign) GetTargetRoas() *common.TargetRoas {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_TargetRoas); ok {
		return x.TargetRoas
	}
	return nil
}

func (m *Campaign) GetTargetSpend() *common.TargetSpend {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_TargetSpend); ok {
		return x.TargetSpend
	}
	return nil
}

func (m *Campaign) GetPercentCpc() *common.PercentCpc {
	if x, ok := m.GetCampaignBiddingStrategy().(*Campaign_PercentCpc); ok {
		return x.PercentCpc
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Campaign) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Campaign_OneofMarshaler, _Campaign_OneofUnmarshaler, _Campaign_OneofSizer, []interface{}{
		(*Campaign_BiddingStrategy)(nil),
		(*Campaign_ManualCpc)(nil),
		(*Campaign_ManualCpm)(nil),
		(*Campaign_MaximizeConversions)(nil),
		(*Campaign_MaximizeConversionValue)(nil),
		(*Campaign_TargetCpa)(nil),
		(*Campaign_TargetRoas)(nil),
		(*Campaign_TargetSpend)(nil),
		(*Campaign_PercentCpc)(nil),
	}
}

func _Campaign_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Campaign)
	// campaign_bidding_strategy
	switch x := m.CampaignBiddingStrategy.(type) {
	case *Campaign_BiddingStrategy:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BiddingStrategy); err != nil {
			return err
		}
	case *Campaign_ManualCpc:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ManualCpc); err != nil {
			return err
		}
	case *Campaign_ManualCpm:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ManualCpm); err != nil {
			return err
		}
	case *Campaign_MaximizeConversions:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MaximizeConversions); err != nil {
			return err
		}
	case *Campaign_MaximizeConversionValue:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MaximizeConversionValue); err != nil {
			return err
		}
	case *Campaign_TargetCpa:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetCpa); err != nil {
			return err
		}
	case *Campaign_TargetRoas:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetRoas); err != nil {
			return err
		}
	case *Campaign_TargetSpend:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetSpend); err != nil {
			return err
		}
	case *Campaign_PercentCpc:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PercentCpc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Campaign.CampaignBiddingStrategy has unexpected type %T", x)
	}
	return nil
}

func _Campaign_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Campaign)
	switch tag {
	case 23: // campaign_bidding_strategy.bidding_strategy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.StringValue)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_BiddingStrategy{msg}
		return true, err
	case 24: // campaign_bidding_strategy.manual_cpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.ManualCpc)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_ManualCpc{msg}
		return true, err
	case 25: // campaign_bidding_strategy.manual_cpm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.ManualCpm)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_ManualCpm{msg}
		return true, err
	case 30: // campaign_bidding_strategy.maximize_conversions
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.MaximizeConversions)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_MaximizeConversions{msg}
		return true, err
	case 31: // campaign_bidding_strategy.maximize_conversion_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.MaximizeConversionValue)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_MaximizeConversionValue{msg}
		return true, err
	case 26: // campaign_bidding_strategy.target_cpa
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.TargetCpa)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_TargetCpa{msg}
		return true, err
	case 29: // campaign_bidding_strategy.target_roas
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.TargetRoas)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_TargetRoas{msg}
		return true, err
	case 27: // campaign_bidding_strategy.target_spend
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.TargetSpend)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_TargetSpend{msg}
		return true, err
	case 34: // campaign_bidding_strategy.percent_cpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.PercentCpc)
		err := b.DecodeMessage(msg)
		m.CampaignBiddingStrategy = &Campaign_PercentCpc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Campaign_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Campaign)
	// campaign_bidding_strategy
	switch x := m.CampaignBiddingStrategy.(type) {
	case *Campaign_BiddingStrategy:
		s := proto.Size(x.BiddingStrategy)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Campaign_ManualCpc:
		s := proto.Size(x.ManualCpc)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Campaign_ManualCpm:
		s := proto.Size(x.ManualCpm)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Campaign_MaximizeConversions:
		s := proto.Size(x.MaximizeConversions)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Campaign_MaximizeConversionValue:
		s := proto.Size(x.MaximizeConversionValue)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Campaign_TargetCpa:
		s := proto.Size(x.TargetCpa)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Campaign_TargetRoas:
		s := proto.Size(x.TargetRoas)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Campaign_TargetSpend:
		s := proto.Size(x.TargetSpend)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Campaign_PercentCpc:
		s := proto.Size(x.PercentCpc)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The network settings for the campaign.
type Campaign_NetworkSettings struct {
	// Whether ads will be served with google.com search results.
	TargetGoogleSearch *wrappers.BoolValue `protobuf:"bytes,1,opt,name=target_google_search,json=targetGoogleSearch,proto3" json:"target_google_search,omitempty"`
	// Whether ads will be served on partner sites in the Google Search Network
	// (requires `target_google_search` to also be `true`).
	TargetSearchNetwork *wrappers.BoolValue `protobuf:"bytes,2,opt,name=target_search_network,json=targetSearchNetwork,proto3" json:"target_search_network,omitempty"`
	// Whether ads will be served on specified placements in the Google Display
	// Network. Placements are specified using the Placement criterion.
	TargetContentNetwork *wrappers.BoolValue `protobuf:"bytes,3,opt,name=target_content_network,json=targetContentNetwork,proto3" json:"target_content_network,omitempty"`
	// Whether ads will be served on the Google Partner Network.
	// This is available only to some select Google partner accounts.
	TargetPartnerSearchNetwork *wrappers.BoolValue `protobuf:"bytes,4,opt,name=target_partner_search_network,json=targetPartnerSearchNetwork,proto3" json:"target_partner_search_network,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}            `json:"-"`
	XXX_unrecognized           []byte              `json:"-"`
	XXX_sizecache              int32               `json:"-"`
}

func (m *Campaign_NetworkSettings) Reset()         { *m = Campaign_NetworkSettings{} }
func (m *Campaign_NetworkSettings) String() string { return proto.CompactTextString(m) }
func (*Campaign_NetworkSettings) ProtoMessage()    {}
func (*Campaign_NetworkSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_84fe59640f66502c, []int{0, 0}
}
func (m *Campaign_NetworkSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Campaign_NetworkSettings.Unmarshal(m, b)
}
func (m *Campaign_NetworkSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Campaign_NetworkSettings.Marshal(b, m, deterministic)
}
func (m *Campaign_NetworkSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign_NetworkSettings.Merge(m, src)
}
func (m *Campaign_NetworkSettings) XXX_Size() int {
	return xxx_messageInfo_Campaign_NetworkSettings.Size(m)
}
func (m *Campaign_NetworkSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign_NetworkSettings.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign_NetworkSettings proto.InternalMessageInfo

func (m *Campaign_NetworkSettings) GetTargetGoogleSearch() *wrappers.BoolValue {
	if m != nil {
		return m.TargetGoogleSearch
	}
	return nil
}

func (m *Campaign_NetworkSettings) GetTargetSearchNetwork() *wrappers.BoolValue {
	if m != nil {
		return m.TargetSearchNetwork
	}
	return nil
}

func (m *Campaign_NetworkSettings) GetTargetContentNetwork() *wrappers.BoolValue {
	if m != nil {
		return m.TargetContentNetwork
	}
	return nil
}

func (m *Campaign_NetworkSettings) GetTargetPartnerSearchNetwork() *wrappers.BoolValue {
	if m != nil {
		return m.TargetPartnerSearchNetwork
	}
	return nil
}

// Campaign-level settings for hotel ads.
type Campaign_HotelSettingInfo struct {
	// The linked Hotel Center account.
	HotelCenterId        *wrappers.Int64Value `protobuf:"bytes,1,opt,name=hotel_center_id,json=hotelCenterId,proto3" json:"hotel_center_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Campaign_HotelSettingInfo) Reset()         { *m = Campaign_HotelSettingInfo{} }
func (m *Campaign_HotelSettingInfo) String() string { return proto.CompactTextString(m) }
func (*Campaign_HotelSettingInfo) ProtoMessage()    {}
func (*Campaign_HotelSettingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84fe59640f66502c, []int{0, 1}
}
func (m *Campaign_HotelSettingInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Campaign_HotelSettingInfo.Unmarshal(m, b)
}
func (m *Campaign_HotelSettingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Campaign_HotelSettingInfo.Marshal(b, m, deterministic)
}
func (m *Campaign_HotelSettingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign_HotelSettingInfo.Merge(m, src)
}
func (m *Campaign_HotelSettingInfo) XXX_Size() int {
	return xxx_messageInfo_Campaign_HotelSettingInfo.Size(m)
}
func (m *Campaign_HotelSettingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign_HotelSettingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign_HotelSettingInfo proto.InternalMessageInfo

func (m *Campaign_HotelSettingInfo) GetHotelCenterId() *wrappers.Int64Value {
	if m != nil {
		return m.HotelCenterId
	}
	return nil
}

// The setting for controlling Dynamic Search Ads (DSA).
type Campaign_DynamicSearchAdsSetting struct {
	// The Internet domain name that this setting represents, e.g., "google.com"
	// or "www.google.com".
	DomainName *wrappers.StringValue `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// The language code specifying the language of the domain, e.g., "en".
	LanguageCode *wrappers.StringValue `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Whether the campaign uses advertiser supplied URLs exclusively.
	UseSuppliedUrlsOnly *wrappers.BoolValue `protobuf:"bytes,3,opt,name=use_supplied_urls_only,json=useSuppliedUrlsOnly,proto3" json:"use_supplied_urls_only,omitempty"`
	// The list of page feeds associated with the campaign.
	FeedIds              []*wrappers.Int64Value `protobuf:"bytes,4,rep,name=feed_ids,json=feedIds,proto3" json:"feed_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Campaign_DynamicSearchAdsSetting) Reset()         { *m = Campaign_DynamicSearchAdsSetting{} }
func (m *Campaign_DynamicSearchAdsSetting) String() string { return proto.CompactTextString(m) }
func (*Campaign_DynamicSearchAdsSetting) ProtoMessage()    {}
func (*Campaign_DynamicSearchAdsSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_84fe59640f66502c, []int{0, 2}
}
func (m *Campaign_DynamicSearchAdsSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Campaign_DynamicSearchAdsSetting.Unmarshal(m, b)
}
func (m *Campaign_DynamicSearchAdsSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Campaign_DynamicSearchAdsSetting.Marshal(b, m, deterministic)
}
func (m *Campaign_DynamicSearchAdsSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign_DynamicSearchAdsSetting.Merge(m, src)
}
func (m *Campaign_DynamicSearchAdsSetting) XXX_Size() int {
	return xxx_messageInfo_Campaign_DynamicSearchAdsSetting.Size(m)
}
func (m *Campaign_DynamicSearchAdsSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign_DynamicSearchAdsSetting.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign_DynamicSearchAdsSetting proto.InternalMessageInfo

func (m *Campaign_DynamicSearchAdsSetting) GetDomainName() *wrappers.StringValue {
	if m != nil {
		return m.DomainName
	}
	return nil
}

func (m *Campaign_DynamicSearchAdsSetting) GetLanguageCode() *wrappers.StringValue {
	if m != nil {
		return m.LanguageCode
	}
	return nil
}

func (m *Campaign_DynamicSearchAdsSetting) GetUseSuppliedUrlsOnly() *wrappers.BoolValue {
	if m != nil {
		return m.UseSuppliedUrlsOnly
	}
	return nil
}

func (m *Campaign_DynamicSearchAdsSetting) GetFeedIds() []*wrappers.Int64Value {
	if m != nil {
		return m.FeedIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Campaign)(nil), "google.ads.googleads.v0.resources.Campaign")
	proto.RegisterType((*Campaign_NetworkSettings)(nil), "google.ads.googleads.v0.resources.Campaign.NetworkSettings")
	proto.RegisterType((*Campaign_HotelSettingInfo)(nil), "google.ads.googleads.v0.resources.Campaign.HotelSettingInfo")
	proto.RegisterType((*Campaign_DynamicSearchAdsSetting)(nil), "google.ads.googleads.v0.resources.Campaign.DynamicSearchAdsSetting")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v0/resources/campaign.proto", fileDescriptor_84fe59640f66502c)
}

var fileDescriptor_84fe59640f66502c = []byte{
	// 1241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xc7, 0x63, 0x27, 0x6b, 0x13, 0xe6, 0xab, 0xa0, 0x9b, 0x84, 0x71, 0xda, 0x2e, 0xed, 0x30,
	0x20, 0x5b, 0x07, 0x39, 0x48, 0xb7, 0x16, 0x43, 0x3b, 0xa0, 0xb6, 0x5b, 0x34, 0x29, 0xd6, 0xd4,
	0x90, 0xdb, 0x6c, 0x18, 0x32, 0x08, 0xb4, 0xc8, 0x28, 0x42, 0x25, 0x52, 0x20, 0xa9, 0x74, 0xd9,
	0xc5, 0xb0, 0xeb, 0xbd, 0xc0, 0x2e, 0x07, 0x0c, 0xbb, 0xea, 0xa3, 0xec, 0x29, 0x86, 0x5d, 0xee,
	0x29, 0x06, 0x91, 0x94, 0xe3, 0x38, 0xb6, 0x25, 0xdf, 0x89, 0xe4, 0xf9, 0xfd, 0xcf, 0xe1, 0xe1,
	0xd1, 0x21, 0xc1, 0x6e, 0xc0, 0x79, 0x10, 0xd1, 0x06, 0x26, 0xb2, 0x61, 0x3e, 0xb3, 0xaf, 0xb3,
	0xdd, 0x86, 0xa0, 0x92, 0xa7, 0xc2, 0xa7, 0xb2, 0xe1, 0xe3, 0x38, 0xc1, 0x61, 0xc0, 0x9c, 0x44,
	0x70, 0xc5, 0xe1, 0x5d, 0x63, 0xe6, 0x60, 0x22, 0x9d, 0x3e, 0xe1, 0x9c, 0xed, 0x3a, 0x7d, 0xa2,
	0xfe, 0xc5, 0x38, 0x51, 0x9f, 0xc7, 0x31, 0x67, 0x8d, 0x5e, 0x48, 0x48, 0xc8, 0x02, 0x23, 0x58,
	0xff, 0xaa, 0xc0, 0xda, 0x4f, 0xa5, 0xe2, 0xb1, 0x97, 0x60, 0x81, 0x63, 0xaa, 0xa8, 0xb0, 0x58,
	0x6b, 0x1c, 0x46, 0x59, 0x1a, 0xcb, 0x06, 0x26, 0x9e, 0xa4, 0xe2, 0x2c, 0x64, 0x81, 0xc7, 0x13,
	0x15, 0xc6, 0xe1, 0xcf, 0x58, 0x85, 0x9c, 0x79, 0x52, 0x61, 0x95, 0x4a, 0xab, 0xf1, 0xb4, 0x48,
	0xe3, 0x8c, 0x0a, 0x15, 0xca, 0x4c, 0xc4, 0x3f, 0xc5, 0x8c, 0xd1, 0xc8, 0x93, 0x69, 0xcf, 0x53,
	0xe7, 0x09, 0xb5, 0x0a, 0x4f, 0xa6, 0x57, 0x18, 0xa0, 0xbf, 0x9e, 0x4c, 0xdb, 0x3c, 0x79, 0x52,
	0x09, 0xac, 0x68, 0x70, 0x3e, 0x88, 0x3e, 0x9e, 0x8c, 0xe6, 0x87, 0xd6, 0x4f, 0xc2, 0xa5, 0x7d,
	0x3f, 0x28, 0x0b, 0x0f, 0x42, 0x77, 0x2c, 0xa4, 0x47, 0xbd, 0xf4, 0xa4, 0xf1, 0x5e, 0xe0, 0x24,
	0xa1, 0xc2, 0xae, 0xdf, 0xfb, 0x0f, 0x81, 0xf9, 0xb6, 0x25, 0xe1, 0x27, 0x60, 0x39, 0xaf, 0x07,
	0x8f, 0xe1, 0x98, 0xa2, 0xca, 0x76, 0x65, 0x67, 0xc1, 0x5d, 0xca, 0x27, 0x0f, 0x71, 0x4c, 0xe1,
	0x7d, 0x50, 0x0d, 0x09, 0x9a, 0xdd, 0xae, 0xec, 0x2c, 0xee, 0x6d, 0xd9, 0x62, 0x72, 0x72, 0x79,
	0xe7, 0x80, 0xa9, 0x87, 0x5f, 0x1e, 0xe1, 0x28, 0xa5, 0x6e, 0x35, 0x24, 0x70, 0x17, 0xcc, 0x69,
	0xa1, 0x39, 0x6d, 0x7e, 0xeb, 0x8a, 0x79, 0x57, 0x89, 0x90, 0x05, 0xc6, 0x5e, 0x5b, 0xc2, 0xef,
	0xc1, 0x35, 0xb3, 0x01, 0xf4, 0xd1, 0x76, 0x65, 0x67, 0x65, 0xef, 0xa9, 0x33, 0xae, 0x74, 0xf5,
	0xb6, 0x9d, 0x3c, 0xf8, 0xae, 0x86, 0x9e, 0xb3, 0x34, 0x1e, 0x9a, 0x72, 0xad, 0x1e, 0x4c, 0xc1,
	0xca, 0xe5, 0xbc, 0xa2, 0x35, 0xed, 0xe1, 0xb0, 0xac, 0x07, 0x03, 0x8f, 0x72, 0x34, 0xb8, 0xe2,
	0x2e, 0xcb, 0xc1, 0x21, 0xfc, 0xa3, 0x02, 0xee, 0x4c, 0xae, 0x6b, 0x34, 0xaf, 0xe3, 0xf8, 0xa1,
	0x20, 0x8e, 0x26, 0xb1, 0x7e, 0x5e, 0x0f, 0x48, 0x0c, 0x44, 0x33, 0x61, 0xdd, 0xdd, 0xc2, 0xe3,
	0x17, 0xe1, 0x6f, 0x15, 0x80, 0xc6, 0xd5, 0x3c, 0x5a, 0xd0, 0xb1, 0x75, 0x0a, 0x63, 0xeb, 0xe3,
	0x6d, 0x43, 0xbf, 0x39, 0x4f, 0xa8, 0x0d, 0x6b, 0xd4, 0x92, 0xbb, 0x8e, 0x47, 0xce, 0xc3, 0xdf,
	0x2b, 0xe0, 0xd6, 0xa4, 0x5f, 0x18, 0x01, 0x1d, 0xd0, 0xd1, 0xd4, 0x01, 0x75, 0xd3, 0xde, 0x84,
	0x98, 0xec, 0xaa, 0xbb, 0x89, 0xc7, 0x2d, 0xc1, 0x0e, 0x58, 0x53, 0x02, 0xfb, 0xef, 0xb2, 0xa8,
	0x52, 0x11, 0x79, 0x8a, 0xc6, 0x49, 0x84, 0x15, 0x45, 0x8b, 0x25, 0x8a, 0xbb, 0x96, 0xa3, 0x6f,
	0x45, 0xf4, 0xc6, 0x82, 0xd0, 0x07, 0x6b, 0x99, 0xd0, 0x70, 0xaf, 0x94, 0x68, 0x69, 0x7b, 0x76,
	0x67, 0x71, 0xaf, 0x31, 0x76, 0x8f, 0xa6, 0xc9, 0x3a, 0x6d, 0x0d, 0x76, 0x72, 0xce, 0xad, 0xa5,
	0x22, 0x1a, 0x9a, 0x93, 0xf0, 0x04, 0xdc, 0x60, 0x54, 0xbd, 0xe7, 0xe2, 0x9d, 0x27, 0xa9, 0x52,
	0x21, 0x0b, 0x24, 0x5a, 0xd1, 0x11, 0x3f, 0x76, 0x0a, 0x6f, 0x85, 0x7e, 0x89, 0x3b, 0x87, 0x46,
	0xa3, 0x6b, 0x25, 0xdc, 0x55, 0x76, 0x79, 0x02, 0x62, 0xb0, 0x7c, 0xca, 0x55, 0x76, 0x52, 0x66,
	0x06, 0x6d, 0x6b, 0x27, 0x4f, 0xa6, 0x71, 0xb2, 0x9f, 0x09, 0x58, 0xc5, 0x03, 0x76, 0xc2, 0xdd,
	0xa5, 0xd3, 0x81, 0x19, 0xf8, 0x6b, 0x05, 0xd4, 0xc9, 0x39, 0xc3, 0x71, 0xe8, 0x7b, 0x92, 0x62,
	0xe1, 0x9f, 0x7a, 0x98, 0xc8, 0xbe, 0xc3, 0xbb, 0xda, 0x61, 0x7b, 0x1a, 0x87, 0xcf, 0x8c, 0x5a,
	0x57, 0x8b, 0x35, 0x89, 0xb4, 0x9e, 0xdc, 0x0d, 0x32, 0x7a, 0x01, 0x3e, 0x07, 0xab, 0xfd, 0x46,
	0xdb, 0x4b, 0x49, 0x40, 0x15, 0xba, 0x56, 0xe2, 0xf8, 0x57, 0x72, 0xa8, 0xa5, 0x19, 0xf8, 0x0b,
	0x58, 0x1b, 0x79, 0x4f, 0xa0, 0x75, 0x5d, 0xdd, 0x2f, 0x0b, 0xaa, 0xbb, 0x65, 0xd8, 0xae, 0x45,
	0xfb, 0x75, 0x3d, 0x62, 0xde, 0xad, 0xf5, 0xae, 0x4e, 0xc2, 0xc7, 0x00, 0x48, 0x85, 0x85, 0xf2,
	0x48, 0x56, 0xc0, 0xb5, 0x12, 0x3b, 0x58, 0xd0, 0xf6, 0xcf, 0xb2, 0xb2, 0x7d, 0x04, 0xe6, 0x29,
	0x23, 0x06, 0xbd, 0x59, 0x02, 0xbd, 0x4e, 0x19, 0xd1, 0xe0, 0x01, 0xb8, 0x31, 0xbc, 0x6b, 0xb4,
	0x51, 0x2c, 0xb0, 0x3f, 0xe3, 0xae, 0x0e, 0x6d, 0x02, 0xbe, 0x04, 0x20, 0xc6, 0x2c, 0xc5, 0x91,
	0xe7, 0x27, 0x3e, 0x42, 0x5a, 0xe4, 0xb3, 0xa2, 0xff, 0xe5, 0x95, 0x26, 0xda, 0x89, 0xbf, 0x3f,
	0xe3, 0x2e, 0xc4, 0xf9, 0xe0, 0x92, 0x56, 0x8c, 0x36, 0xa7, 0xd3, 0x8a, 0x07, 0xb5, 0x62, 0x78,
	0x0a, 0x6e, 0xc6, 0xf8, 0xa7, 0xac, 0xc3, 0x52, 0xcf, 0xe7, 0xec, 0x8c, 0x0a, 0x19, 0x72, 0x26,
	0xd1, 0x1d, 0xad, 0xfa, 0xa0, 0x58, 0xd5, 0xb0, 0xed, 0x0b, 0x74, 0x7f, 0xc6, 0xad, 0xc5, 0x57,
	0xa7, 0x61, 0x0a, 0x36, 0x47, 0x78, 0xf2, 0xce, 0xb2, 0x8c, 0xa1, 0x8f, 0xb5, 0xbb, 0x47, 0xd3,
	0xbb, 0xcb, 0x13, 0xbe, 0x11, 0x8f, 0x5e, 0xca, 0x92, 0xa5, 0xb0, 0x08, 0xa8, 0xf2, 0xfc, 0x04,
	0xa3, 0x7a, 0xb9, 0x64, 0xbd, 0xd1, 0x44, 0x3b, 0xc1, 0x59, 0xb2, 0x54, 0x3e, 0x80, 0xaf, 0xc0,
	0xa2, 0xd5, 0x12, 0x1c, 0x4b, 0x74, 0x5b, 0x8b, 0x7d, 0x5e, 0x4e, 0xcc, 0xe5, 0x38, 0x4b, 0x8d,
	0x0d, 0x26, 0x1b, 0xc1, 0x0e, 0x58, 0xb2, 0x72, 0x32, 0xa1, 0x8c, 0xa0, 0x2d, 0xad, 0x77, 0xbf,
	0x9c, 0x5e, 0x37, 0x43, 0xf6, 0x67, 0x5c, 0x1b, 0x91, 0x1e, 0x66, 0x01, 0x26, 0x54, 0xf8, 0x94,
	0x29, 0x5d, 0x66, 0xf7, 0xca, 0x05, 0xd8, 0x31, 0x88, 0xa9, 0x33, 0x90, 0xf4, 0x47, 0xf5, 0x7f,
	0xaa, 0x60, 0x75, 0xa8, 0x8f, 0xc2, 0x6f, 0xc1, 0x4d, 0x1b, 0xb4, 0x91, 0xb2, 0x8d, 0x4d, 0x3f,
	0xbd, 0x16, 0xf7, 0xea, 0x57, 0xfe, 0x8b, 0x16, 0xe7, 0x91, 0xf9, 0xad, 0xa0, 0xe1, 0x5e, 0x68,
	0x03, 0xd3, 0xa8, 0xe0, 0x21, 0x58, 0xcb, 0x53, 0x60, 0xfa, 0xa3, 0xed, 0xd2, 0xa8, 0x5a, 0x28,
	0x57, 0xb3, 0x1b, 0xd7, 0x9c, 0x8d, 0x12, 0x76, 0xc0, 0x7a, 0x7e, 0xda, 0x9c, 0xa9, 0x2c, 0x0f,
	0xb9, 0xe0, 0x6c, 0xa1, 0xa0, 0xdd, 0x57, 0xdb, 0x80, 0xb9, 0xe2, 0x8f, 0xe0, 0xb6, 0x55, 0x4c,
	0xb0, 0x50, 0x8c, 0x8a, 0xe1, 0x48, 0xe7, 0x0a, 0x85, 0xeb, 0x46, 0xa0, 0x63, 0xf8, 0x4b, 0x01,
	0xd7, 0xbf, 0x03, 0x37, 0x86, 0x2f, 0x11, 0xd8, 0x06, 0xab, 0xe6, 0x66, 0xca, 0xce, 0x81, 0x0a,
	0x2f, 0x24, 0x36, 0xbb, 0x13, 0x9f, 0xaf, 0xe6, 0x36, 0x6b, 0x6b, 0xe4, 0x80, 0xd4, 0xff, 0xaa,
	0x82, 0x8d, 0x31, 0xb7, 0x05, 0xfc, 0x06, 0x2c, 0x12, 0x1e, 0xe3, 0x90, 0x5d, 0xbc, 0x9a, 0x8b,
	0x7a, 0x22, 0x30, 0x80, 0x7e, 0x51, 0x37, 0xc1, 0x72, 0x84, 0x59, 0x90, 0xe2, 0x20, 0xfb, 0x93,
	0x09, 0xb5, 0x87, 0x35, 0x59, 0x60, 0x29, 0x47, 0xda, 0x9c, 0x50, 0xf8, 0x1a, 0xac, 0xa7, 0x92,
	0x7a, 0x32, 0x4d, 0x92, 0x28, 0xa4, 0x24, 0x7b, 0x9f, 0x48, 0x8f, 0xb3, 0xe8, 0xbc, 0xc4, 0x39,
	0xd5, 0x52, 0x49, 0xbb, 0x16, 0x7c, 0x2b, 0x22, 0xf9, 0x9a, 0x45, 0xe7, 0xf0, 0x21, 0x98, 0x3f,
	0xa1, 0x94, 0x78, 0x21, 0x91, 0x68, 0x4e, 0xbf, 0x46, 0x26, 0x26, 0xeb, 0x7a, 0x66, 0x7c, 0x40,
	0x64, 0x6b, 0x0b, 0x6c, 0x5e, 0xdc, 0x8f, 0x43, 0xbd, 0xbe, 0xf5, 0xa1, 0x02, 0x3e, 0xf5, 0x79,
	0x5c, 0x7c, 0x41, 0xb7, 0x96, 0xf3, 0x1b, 0xba, 0x93, 0x39, 0xeb, 0x54, 0xfe, 0xac, 0xce, 0xbe,
	0x68, 0x36, 0x3f, 0x54, 0xef, 0x9a, 0x6a, 0x77, 0x9a, 0x44, 0x3a, 0xe6, 0x33, 0xfb, 0x3a, 0xda,
	0x75, 0xdc, 0x1c, 0xfd, 0x3b, 0xb7, 0x39, 0x6e, 0x12, 0x79, 0xdc, 0xb7, 0x39, 0x3e, 0xda, 0x3d,
	0xee, 0xdb, 0xfc, 0x5b, 0xc2, 0xa6, 0x77, 0x4d, 0xef, 0xf3, 0xc1, 0xff, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xf0, 0xde, 0x1d, 0x35, 0x6d, 0x0f, 0x00, 0x00,
}
