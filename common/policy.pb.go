// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/kritzware/google-ads-go/common/policy.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Key of the violation. The key is used for referring to a violation
// when filing an exemption request.
type PolicyViolationKey struct {
	// Unique ID of the violated policy.
	PolicyName *wrappers.StringValue `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// The text that violates the policy if specified.
	// Otherwise, refers to the policy in general
	// (e.g., when requesting to be exempt from the whole policy).
	// If not specified for criterion exemptions, the whole policy is implied.
	// Must be specified for ad exemptions.
	ViolatingText        *wrappers.StringValue `protobuf:"bytes,2,opt,name=violating_text,json=violatingText,proto3" json:"violating_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PolicyViolationKey) Reset()         { *m = PolicyViolationKey{} }
func (m *PolicyViolationKey) String() string { return proto.CompactTextString(m) }
func (*PolicyViolationKey) ProtoMessage()    {}
func (*PolicyViolationKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f68bb4dbf48055e, []int{0}
}
func (m *PolicyViolationKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyViolationKey.Unmarshal(m, b)
}
func (m *PolicyViolationKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyViolationKey.Marshal(b, m, deterministic)
}
func (m *PolicyViolationKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyViolationKey.Merge(m, src)
}
func (m *PolicyViolationKey) XXX_Size() int {
	return xxx_messageInfo_PolicyViolationKey.Size(m)
}
func (m *PolicyViolationKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyViolationKey.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyViolationKey proto.InternalMessageInfo

func (m *PolicyViolationKey) GetPolicyName() *wrappers.StringValue {
	if m != nil {
		return m.PolicyName
	}
	return nil
}

func (m *PolicyViolationKey) GetViolatingText() *wrappers.StringValue {
	if m != nil {
		return m.ViolatingText
	}
	return nil
}

func init() {
	proto.RegisterType((*PolicyViolationKey)(nil), "google.ads.googleads.v0.common.PolicyViolationKey")
}

func init() {
	proto.RegisterFile("github.com/kritzware/google-ads-go/common/policy.proto", fileDescriptor_8f68bb4dbf48055e)
}

var fileDescriptor_8f68bb4dbf48055e = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x4f, 0x4c, 0x29, 0xd6, 0x87, 0x30, 0x41, 0xac, 0x32, 0x03, 0xfd, 0xe4, 0xfc,
	0xdc, 0xdc, 0xfc, 0x3c, 0xfd, 0x82, 0xfc, 0x9c, 0xcc, 0xe4, 0x4a, 0xbd, 0x82, 0xa2, 0xfc, 0x92,
	0x7c, 0x21, 0x39, 0x88, 0x0a, 0xbd, 0xc4, 0x94, 0x62, 0x3d, 0xb8, 0x62, 0xbd, 0x32, 0x03, 0x3d,
	0x88, 0x62, 0x29, 0xa8, 0xbc, 0x3e, 0x58, 0x75, 0x52, 0x69, 0x9a, 0x7e, 0x79, 0x51, 0x62, 0x41,
	0x41, 0x6a, 0x51, 0x31, 0x44, 0xbf, 0xd2, 0x0c, 0x46, 0x2e, 0xa1, 0x00, 0xb0, 0x81, 0x61, 0x99,
	0xf9, 0x39, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xde, 0xa9, 0x95, 0x42, 0xb6, 0x5c, 0xdc, 0x10, 0x6b,
	0xe2, 0xf3, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x64, 0xa0, 0x36, 0xe8,
	0xc1, 0x0c, 0xd3, 0x0b, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x0f, 0x4b, 0xcc, 0x29, 0x4d, 0x0d, 0xe2,
	0x82, 0x68, 0xf0, 0x4b, 0xcc, 0x4d, 0x15, 0x72, 0xe6, 0xe2, 0x2b, 0x83, 0x18, 0x97, 0x97, 0x1e,
	0x5f, 0x92, 0x5a, 0x51, 0x22, 0xc1, 0x44, 0x84, 0x09, 0xbc, 0x70, 0x3d, 0x21, 0xa9, 0x15, 0x25,
	0x4e, 0x73, 0x18, 0xb9, 0x94, 0x92, 0xf3, 0x73, 0xf5, 0xf0, 0xfb, 0xd0, 0x89, 0x1b, 0xe2, 0xfc,
	0x00, 0x90, 0x89, 0x01, 0x8c, 0x8b, 0x98, 0x98, 0xdd, 0x1d, 0x1d, 0x57, 0x31, 0xc9, 0xb9, 0x43,
	0x74, 0x39, 0xa6, 0x14, 0xeb, 0x41, 0x98, 0x20, 0x56, 0x98, 0x81, 0x9e, 0x33, 0x58, 0xd7, 0x29,
	0x98, 0x82, 0x18, 0xc7, 0x94, 0xe2, 0x18, 0xb8, 0x82, 0x98, 0x30, 0x83, 0x18, 0x88, 0x82, 0x47,
	0x84, 0x14, 0x24, 0xb1, 0x81, 0xfd, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x05, 0xa3, 0xc8,
	0xa7, 0xaf, 0x01, 0x00, 0x00,
}
